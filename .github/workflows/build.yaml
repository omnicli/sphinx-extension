name: Build

on:
  push:
    branches:
      - main

    tags:
      - v*

  pull_request:

  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CI: 'true'

jobs:
  prepare-env:
    name: Prepare environment
    runs-on: "ubuntu-latest"

    outputs:
      requires_tests: ${{ env.REQUIRES_TESTS }}
      publish_release: ${{ env.PUBLISH_RELEASE }}
      release_version: ${{ env.RELEASE_VERSION }}

    steps:
      - name: Check if tests should happen no matter the files
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          REQUIRES_TESTS=false
          if [[ "$GITHUB_EVENT_NAME" == "schedule" ]] || \
             [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/heads/main" ]] || \
             [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/tags/v"* ]]; then
            REQUIRES_TESTS=true
          fi
          echo "REQUIRES_TESTS=${REQUIRES_TESTS}" | tee -a "$GITHUB_ENV"

      - name: Checkout current commit
        uses: "actions/checkout@v4"
        if: ${{ env.REQUIRES_TESTS != 'true' }}

      - name: Get the changed files that would require tests
        id: changed-files
        if: ${{ env.REQUIRES_TESTS != 'true' }}
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha || 'HEAD^' }}
          MODIFIED_FILES_SOURCE_CODE: lib/** tests/** .github/workflows/build.yaml
        run: |
          .github/scripts/get-changed-files.sh

      - name: Identify if testing is required
        if: ${{ env.REQUIRES_TESTS != 'true' }}
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.source_code_any_changed }}
          DELETED_FILES: ${{ steps.changed-files.outputs.source_code_any_deleted }}
          MODIFIED_FILES: ${{ steps.changed-files.outputs.source_code_any_modified }}
        run: |
          REQUIRES_TESTS=false
          if [[ "$CHANGED_FILES" == "true" ]] || \
             [[ "$DELETED_FILES" == "true" ]] || \
             [[ "$MODIFIED_FILES" == "true" ]]; then
            REQUIRES_TESTS=true
          fi
          echo "REQUIRES_TESTS=${REQUIRES_TESTS}" | tee -a "$GITHUB_ENV"

      - name: Check if pushing a tag
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          PUBLISH_RELEASE=false
          if [[ -n "$GITHUB_REF" ]] && [[ "$GITHUB_REF" == "refs/tags/v"* ]]; then
            PUBLISH_RELEASE=true
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" | tee -a "$GITHUB_ENV"
          fi
          echo "PUBLISH_RELEASE=${PUBLISH_RELEASE}" | tee -a "$GITHUB_ENV"


  ruff:
    name: Checking code formatting
    runs-on: ubuntu-latest

    needs:
      - prepare-env

    if: needs.prepare-env.outputs.requires_tests == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run ruff
        uses: astral-sh/ruff-action@v3


  tests:
    name: Tests
    runs-on: "ubuntu-latest"

    needs:
      - prepare-env

    if: needs.prepare-env.outputs.requires_tests == 'true'

    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: 3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          echo "__version__ = \"0.0.0+cibuild\"" > lib/omnicli_sphinx/version.py
          pip install -e ".[dev,test,ci]"
          rm lib/omnicli_sphinx/version.py

      - name: Run unit & integration tests
        id: tests
        run: |
          set -eo pipefail
          pytest \
            --cache-clear \
            --cov=omnicli \
            --cov-report \
            term-missing \
            --junitxml=pytest.xml \
            tests/ \
            | tee pytest-coverage.txt
        continue-on-error: true

      - name: Identify bot comments to hide
        uses: actions/github-script@v7
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComments = comments.filter(comment => {
              return comment.user.type === 'Bot' && comment.body.startsWith('<!-- Pytest Coverage Comment: tests -->')
            }).map((comment) => comment.node_id)

            if (botComments.length > 0) {
              core.exportVariable('BOT_COMMENTS', botComments.join(' '))
              console.log('BOT_COMMENTS=' + botComments.join(' '))
            }

      - name: Minimize comments from previous run
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork && env.BOT_COMMENTS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          QUERY=$(cat <<- EOM
            mutation minimizeComment(\$id: ID!) {
              minimizeComment(input: { classifier: OUTDATED, subjectId: \$id }) {
                clientMutationId
              }
            }
          EOM
          )

          for commentId in ${{ env.BOT_COMMENTS }}; do
            gh api graphql -F id="$commentId" -F query="$QUERY"
            echo
          done

      - name: Post comment of pytest coverage
        continue-on-error: true
        uses: MishaKav/pytest-coverage-comment@main
        if: steps.tests.outcome == 'success' && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork
        with:
          create-new-comment: true
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Overall job outcome
        run: |
          TESTS=$([ '${{ steps.tests.outcome }}' == 'success' ] && echo true || echo false)

          if ! $TESTS; then
            echo "Tests failed" >&2
          fi

          # Exit on error if any failed
          if ! $TESTS; then
            exit 1
          fi

          exit 0


  results:
    name: Aggregate test results
    runs-on: ubuntu-latest

    needs:
      - ruff
      - tests

    if: always()

    steps:
      - name: Fail if ruff failed
        if: needs.ruff.result == 'failure'
        run: exit 1

      - name: Fail if tests failed
        if: needs.tests.result == 'failure'
        run: exit 1


  push-release:
    name: Release version
    runs-on: ubuntu-latest

    needs:
      - prepare-env
      - results

    if: needs.prepare-env.outputs.publish_release == 'true' && needs.results.result != 'failure'

    permissions:
      contents: write

    steps:
      - name: Create application token
        uses: actions/create-github-app-token@v2
        id: app-token
        env:
          APP_ID: ${{ secrets.OMNICLI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.OMNICLI_PRIVATE_KEY }}
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Release version
        uses: ncipollo/release-action@v1
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag: v${{ needs.prepare-env.outputs.release_version }}
          name: v${{ needs.prepare-env.outputs.release_version }}
          generateReleaseNotes: true
          commit: ${{ github.sha }}
          makeLatest: true
          skipIfReleaseExists: true
          # This should allow to fail the release creation
          # if the release already exists and is not a draft
          # or pre-release (none of our releases are)
          allowUpdates: true
          updateOnlyUnreleased: true



  push-library:
    name: Push library to PyPI
    runs-on: ubuntu-latest

    needs:
      - prepare-env
      - push-release

    environment:
      name: pypi
      url: https://pypi.org/p/omnicli-sphinx

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    steps:
      - name: Checkout current commit
        uses: "actions/checkout@v4"

      - name: Install Hatch
        uses: pypa/hatch@install

      - name: Create version file
        env:
          VERSION: ${{ needs.prepare-env.outputs.release_version }}
        run: |
          echo "__version__ = \"${VERSION}\"" | tee lib/omnicli_sphinx/version.py

      - name: Build package distributions
        run: |
          hatch build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
